---
title: "00_authors"
format: md
editor: visual
---

# Check authors' inner clusterisation

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

library(stylo)
library(seetrees)
```

## load data

```{r}
fh <- list.files("corpus_authors/", full.names = T)

corpus <- tibble(
  path = fh,
  text = sapply(path, read_file),
  author = str_remove_all(path, "corpus_authors//|\\.txt")
)

glimpse(corpus)
unique(corpus$author)
```

## create samples

N tokens for each author:

```{r}
corpus %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(author, sort = T)
```

```{r}
sample_size <- 2000
```

```{r}
corpus_authors_t <- corpus %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  
  group_by(author) %>% 
  # reshuffle words inside each author
  do(sample_n(., size = nrow(.))) %>%
  
  mutate(sample = ceiling(row_number()/sample_size)) %>% 
  unite(sample_id, c(author, sample), remove = F) %>% 
  filter(sample != max(sample)) %>% 
  ungroup() %>% 
  select(sample_id, author, word, sample)

head(corpus_authors_t)
```

## sampling

```{r}
print(paste("Total number of full 2000 words samples:",
      corpus_authors_t %>% 
        select(sample_id) %>% pull() %>% unique %>% length))
```

## function

```{r}
sample_indipendent <- function(corpus_tokenised, n_samples, sample_size,
                               text_var = "word", 
                               folder = "corpus_samples_dump/",
                               overwrite = T) {
  
  dir.create(folder)
  
  if(overwrite) {
    do.call(file.remove, list(list.files("corpus_samples_dump/", full.names = TRUE)))
  }
  
    
    seed_samples <- corpus_tokenised %>% 
      select(sample_id, author) %>% 
      distinct() %>% 
      group_by(author) %>% 
      sample_n(n_samples) %>% 
      pull(sample_id)
    
    # create table with 1 row = 1 sample
    true_samples <- corpus_tokenised %>% 
      filter(sample_id %in% seed_samples) %>% 
      group_by(sample_id) %>% 
      summarise(text = paste(!!sym(text_var), collapse = " "))
    
    
    for (i in 1:nrow(true_samples)) {
      write_file(file = paste0(folder, true_samples$sample_id[i], ".txt"),
                 true_samples$text[i])
    }

}
```

## sampling

### 2 samples test

```{r}
sample_indipendent(corpus_tokenised = corpus_authors_t,
                   n_samples = 2,
                   sample_size = 2000)
```

```{r}
test_samples_2 <- stylo(
  gui = F,
  corpus.dir = "corpus_samples_dump/",
               corpus.lang = "Other",
               distance.measure = "wurzburg",
               mfw.min = 200,
               mfw.max = 200
)
```

```{r}
view_tree(test_samples_2, k = 2, label_size = 4)
```

```{r}
test_samples_2$features.actually.used
```

### 4 samples test

```{r}
sample_indipendent(corpus_tokenised = corpus_authors_t,
                   n_samples = 4,
                   sample_size = 2000)
```

```{r}
n_samples = 4

length(unique(corpus_authors_t$author))*4 == (length(list.files(path = "corpus_samples_dump/")))
```

```{r}
test_samples_4 <- stylo(
  gui = F,
  corpus.dir = "corpus_samples_dump/",
               corpus.lang = "Other",
               distance.measure = "wurzburg",
               mfw.min = 200,
               mfw.max = 200
)
```

```{r}
view_tree(test_samples_4, k = 2, label_size = 4)
```

```{r}
test_samples_4$features.actually.used
```

## bootstrap test

### all

```{r, warning=FALSE, message=FALSE}
test_bootstrap <- stylo(
            gui=F,
            mfw.min=100,
            mfw.max=500,
            mfw.incr = 1,
            analyzed.features = "w",
            ngram.size = 1,
            analysis.type = "BCT",
            consensus.strength = 0.5,
            distance.measure = "wurzburg",
            corpus.dir="corpus_authors/",
            corpus.lang="Other"
)
```

### samples

```{r, warning=FALSE, message=FALSE}
bct_words <- stylo(
            gui=F,
            mfw.min=100,
            mfw.max=200,
            mfw.incr = 1,
            analyzed.features = "w",
            ngram.size = 1,
            analysis.type = "BCT",
            consensus.strength = 0.5,
            distance.measure = "wurzburg",
            corpus.dir="corpus_samples_dump/",
            corpus.lang="Other"
            )
```
